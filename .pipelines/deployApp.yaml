pool:
  vmImage: ubuntu-latest

variables:
  - group: "Variable Group"
  - name: azureSubscriptionEndpoint
    value: AzureRM
  - name: pythonVersion
    value: "3.9"
  - name: infraDir
    value: '"$(Build.SourcesDirectory)/infrastructure"'

stages:
  - stage: "infrastructure"
    jobs:
    - job:
      steps:
      - bash: terraform version
        displayName: 'terraform: version'
      - bash: terraform -chdir=$(infraDir) init
        displayName: 'terraform: init'
        env:
          ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
          ARM_CLIENT_ID:       $(kv-arm-client-id)
          ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
          ARM_TENANT_ID:       $(kv-arm-tenant-id)
      - bash: terraform -chdir=$(infraDir) validate
        displayName: 'terraform: validate'
      - bash: terraform -chdir=$(infraDir) apply -auto-approve
        env:
          ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
          ARM_CLIENT_ID:       $(kv-arm-client-id)
          ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
          ARM_TENANT_ID:       $(kv-arm-tenant-id)
      - powershell: tree
        displayName: 'Tree list in Build.SourcesDirectory $(Build.SourcesDirectory)'
      - bash: echo $(webAppName)
        displayName: 'check webApp name'

      - bash: echo "##vso[task.setvariable variable=myVar;]$(terraform -chdir=$(infraDir) output appserviceName)"
        env:
          ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
          ARM_CLIENT_ID:       $(kv-arm-client-id)
          ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
          ARM_TENANT_ID:       $(kv-arm-tenant-id)
      - bash: echo $(myVar)

  - stage: "deployment"
    jobs:
      - job:
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(pythonVersion)'
          displayName: 'Use Python $(pythonVersion)'
        - script: |
            python -m venv antenv
            source antenv/bin/activate
            python -m pip install --upgrade pip
            pip install setup
            pip install -r requirements.txt
          workingDirectory: 'appServicePython'
          displayName: "Install requirements"
        - task: AzureWebApp@1
          displayName: 'Deploy Azure Web App : {{ $(webAppName) }}'
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            appName: $(webAppName)
            appType: "webAppLinux"
            package: $(Build.SourcesDirectory)/appServicePython/
            # The following parameter is specific to the Flask example code. You may
            # or may not need a startup command for your app.
            startUpCommand: 'gunicorn --bind=0.0.0.0 --timeout 600 hello:myapp'