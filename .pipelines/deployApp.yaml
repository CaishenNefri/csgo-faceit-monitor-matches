pool:
  vmImage: ubuntu-latest

variables:
  - group: "Variable Group"
  - name: azureSubscriptionEndpoint
    value: AzureRM
  - name: pythonVersion
    value: "3.8"
  - name: infraDir
    value: '"$(Build.SourcesDirectory)/infrastructure"'

stages:
  - stage: "infrastructure"
    jobs:
    - job: "CheckChangesInfra"
      displayName: 'Check changes'
      steps:
        - bash: |
            PATH_FILTER="infrastructure/"
            CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
            MATCH_COUNT=0

            echo "Checking for file changes..."
            for FILE in $CHANGED_FILES
            do
              if [[ $FILE == *$PATH_FILTER* ]]; then
                echo "MATCH:  ${FILE} changed"
                MATCH_COUNT=$(($MATCH_COUNT+1))
              else
                echo "IGNORE: ${FILE} changed"
              fi
            done

            echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
            if [[ $MATCH_COUNT -gt 0 ]]; then
              echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
            else
              echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
            fi
          name: check_changes
          displayName: 'Check changed files'
    - job: "BuildInfra"
      displayName: 'Build Infra'
      dependsOn: CheckChangesInfra
      condition: eq(dependencies.CheckChangesInfra.outputs['check_changes.SOURCE_CODE_CHANGED'], 'true')
      steps:
      - bash: terraform version
        displayName: 'terraform: version'
      - bash: terraform -chdir=$(infraDir) init -upgrade
        displayName: 'terraform: init'
        env:
          ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
          ARM_CLIENT_ID:       $(kv-arm-client-id)
          ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
          ARM_TENANT_ID:       $(kv-arm-tenant-id)
      - bash: terraform -chdir=$(infraDir) validate
        displayName: 'terraform: validate'
      - bash: terraform -chdir=$(infraDir) apply -auto-approve
        displayName: 'terraform: apply'
        env:
          ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
          ARM_CLIENT_ID:       $(kv-arm-client-id)
          ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
          ARM_TENANT_ID:       $(kv-arm-tenant-id)
      - powershell: tree
        displayName: 'Tree list in Build.SourcesDirectory $(Build.SourcesDirectory)'
      - bash: echo $(webAppName)
        displayName: 'check webApp name'

      - bash: echo "##vso[task.setvariable variable=appserviceName;]$(terraform -chdir=$(infraDir) output appserviceName)"
        env:
          ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
          ARM_CLIENT_ID:       $(kv-arm-client-id)
          ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
          ARM_TENANT_ID:       $(kv-arm-tenant-id)
      - bash: echo $(appserviceName)

  - stage: "deployment"
    jobs:
      - job:
        displayName: "Deploy WebAppService"
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(pythonVersion)'
          displayName: 'Use Python $(pythonVersion)'
        - script: |
            python -m venv antenv
            source antenv/bin/activate
            python -m pip install --upgrade pip
            pip install setup
            pip install -r requirements.txt
          workingDirectory: 'appServicePython'
          displayName: "Install requirements"
        - task: AzureWebApp@1
          displayName: 'Deploy Azure Web App : {{ $(webAppName) }}'
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            appName: $(webAppName)
            appType: "webAppLinux"
            package: $(Build.SourcesDirectory)/appServicePython/
            # The following parameter is specific to the Flask example code. You may
            # or may not need a startup command for your app.
            startUpCommand: 'gunicorn --bind=0.0.0.0 --timeout 600 hello:myapp'
      - job:
        displayName: "Deploy FunctionAppService"
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.9'
            architecture: 'x64'
          displayName: 'Use Python 3.9'
        - script: |
            python -m venv antenv
            source antenv/bin/activate
            python -m pip install --upgrade pip
            pip install setup
            pip install -r requirements.txt
          workingDirectory: 'serverlessAPI'
          displayName: "Install requirements"
        - task: ArchiveFiles@2
          displayName: "Archive files"
          inputs:
            rootFolderOrFile: "$(Build.SourcesDirectory)/serverlessAPI/"
            includeRootFolder: false
            archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
            artifactName: 'drop'
        - task: AzureFunctionApp@1
          displayName: 'Deploy Azure Function App : {{ $(funAppName) }}'
          inputs:
            azureSubscription: $(azureSubscriptionEndpoint)
            appName: $(funAppName)
            appType: "functionAppLinux"
            package: $(System.ArtifactsDirectory)/**/drop