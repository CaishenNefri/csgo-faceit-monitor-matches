pool:
  vmImage: ubuntu-latest

variables:
  - group: "Variable Group"
  - name: azureSubscriptionEndpoint
    value: AzureRM
  # - webAppName: app-service-47651
  - name: pythonVersion
    value: "3.9"
  - name: infraDir
    value: '"$(Build.SourcesDirectory)/infrastructure"'

jobs:
  - job: "infrastructure"
    steps:
    - bash: terraform version
      displayName: 'terraform: version'
    - task: Bash@3
      displayName: 'terraform: version'
      inputs:
        targetType: 'inline'
        script: 'terraform version'
    - task: Bash@3
      displayName: 'terraform: init'
      inputs:
        targetType: 'inline'
        script: 'terraform -chdir=$(infraDir) init'
      env:
        ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
        ARM_CLIENT_ID:       $(kv-arm-client-id)
        ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
        ARM_TENANT_ID:       $(kv-arm-tenant-id)
    - task: Bash@3
      displayName: 'terraform: validate'
      inputs:
        targetType: 'inline'
        script: 'terraform -chdir=$(infraDir) validate'
    - task: Bash@3
      displayName: 'terraform: apply'
      inputs:
        targetType: 'inline'
        script: 'terraform -chdir=$(infraDir) apply -auto-approve'
      env:
        ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
        ARM_CLIENT_ID:       $(kv-arm-client-id)
        ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
        ARM_TENANT_ID:       $(kv-arm-tenant-id)
    - task: Bash@3
      displayName: 'Show files in $(Build.SourcesDirectory)'
      inputs:
        targetType: 'inline'
        script: 'ls ''$(Build.SourcesDirectory)'''
    - task: PowerShell@2
      displayName: 'Tree list in Build.SourcesDirectory $(Build.SourcesDirectory)'
      inputs:
        targetType: 'inline'
        script: 'tree'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: 'appServicePython'
      displayName: "Install requirements"

    - bash: echo $(webAppName)
      displayName: 'check webApp name'

    - bash: echo "##vso[task.setvariable variable=myVar;]$(terraform -chdir=$(infraDir) output appserviceName)"
      env:
        ARM_SUBSCRIPTION_ID: $(kv-arm-subscription-id)
        ARM_CLIENT_ID:       $(kv-arm-client-id)
        ARM_CLIENT_SECRET:   $(kv-arm-client-secret)
        ARM_TENANT_ID:       $(kv-arm-tenant-id)

    - bash: echo $(myVar)
  - job: "deployment"
    steps:
    - task: AzureWebApp@1
      displayName: 'Deploy Azure Web App : {{ $(webAppName) }}'
      inputs:
        azureSubscription: $(azureSubscriptionEndpoint)
        appName: $(webAppName)
        # appType: "webAppLinux"
        package: $(Build.SourcesDirectory)/appServicePython/
        # The following parameter is specific to the Flask example code. You may
        # or may not need a startup command for your app.
        startUpCommand: 'gunicorn --bind=0.0.0.0 --timeout 600 hello:myapp'